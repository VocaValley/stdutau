#include "pluginfile.h"

#include "private/usthelper_p.h"

namespace Utau {

    /*!
        \class PluginFileReader
        \brief Plugin temporary text file reader.

        Use this class to read the \c .tmp file generated by UTAU when your plugin starts.
        Note that the \c Version and \c settings sections are readonly and not needed in the
        return file.
    */

    class PluginFileReader::Private {
    public:
        UstVersion version;
        UstSettings settings;

        std::optional<NoteExt> prevNote;
        std::optional<NoteExt> nextNote;

        int startIndex = 0;
        std::vector<NoteExt> notes;
    };

    /*!
        Constructor.
    */
    PluginFileReader::PluginFileReader() : d_ptr(std::make_unique<Private>()) {
    }

    /*!
        Reads \c plugin information from stream, returns \c true if success.
    */
    bool PluginFileReader::load(const std::filesystem::path &path) {
        return false;
    }

    UstVersion PluginFileReader::version() const {
        return d_ptr->version;
    }

    UstSettings PluginFileReader::settings() const {
        return d_ptr->settings;
    }

    std::optional<NoteExt> PluginFileReader::prevNote() const {
        return d_ptr->prevNote;
    }

    std::optional<NoteExt> PluginFileReader::nextNote() const {
        return d_ptr->nextNote;
    }

    int PluginFileReader::startIndex() const {
        return d_ptr->startIndex;
    }

    std::vector<NoteExt> PluginFileReader::notes() const {
        return d_ptr->notes;
    }

    /*!
        \class PluginFileWriter
        \brief Plugin temporary text file writer.

        Use this class to write the \c .tmp file as the return to UTAU when your plugin quits.
    */

    class PluginFileWriter::Private {
        std::optional<Note> prevNote;
        std::optional<Note> nextNote;

        std::vector<std::pair<int, Note>> changedNotes;
        std::vector<std::pair<int, std::vector<Note>>> insertedNotes;
        std::vector<int> removedNotes;
    };

    /*!
        Constructor.
    */
    PluginFileWriter::PluginFileWriter() : d_ptr(std::make_unique<Private>()) {
    }

    /*!
        Writes \c plugin information to stream, returns \c true if success.
    */
    bool PluginFileWriter::save(const std::filesystem::path &path) const {
        return false;
    }

    void PluginFileWriter::setChangedPrevNote(const Note &note) {
    }

    void PluginFileWriter::setChangedNextNote(const Note &note) {
    }

    void PluginFileWriter::addChangedNote(int index, const Note &note) {
    }

    void PluginFileWriter::addChangedNotes(int index, const std::vector<Note> &notes) {
    }

    void PluginFileWriter::addInsertedNote(int index, const Note &note) {
    }

    void PluginFileWriter::addInsertedNotes(int index, const std::vector<Note> &notes) {
    }

    void PluginFileWriter::addRemovedNote(int index) {
    }

    void PluginFileWriter::addRemovedNotes(const std::vector<int> &indexes) {
    }

}